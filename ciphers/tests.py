# crpyt: toy cryptographic python library
# Copyright (C) 2014 Quentin SANTOS
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# END LICENCE

from util import *

from des import *
key   = [0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef]
block = [0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10]
out   = [0x37, 0x64, 0x38, 0x4f, 0x8e, 0x76, 0x12, 0x6b]
assert bits_to_words(DES(words_to_bits(key)).block(words_to_bits(block), True)) == out

from rc2 import *
assert hexa("0000000000000000",                 "0000000000000000",  63) == "ebb773f993278eff"
assert hexa("ffffffffffffffff",                 "ffffffffffffffff",  64) == "278b27e42e2f0d49"
assert hexa("3000000000000000",                 "1000000000000001",  64) == "30649edf9be7d2c2"
assert hexa("88",                               "0000000000000000",  64) == "61a8a244adacccf0"
assert hexa("88bca90e90875a",                   "0000000000000000",  64) == "6ccf4308974c267f"
assert hexa("88bca90e90875a7f0f79c384627bafb2", "0000000000000000",  64) == "1a807d272bbe5db1"
assert hexa("88bca90e90875a7f0f79c384627bafb2", "0000000000000000", 128) == "2269552ab0f85ca6"

from rc4 import *
assert RC4("Key"   ).gen(10) == "eb9f7781b734ca72a719"
assert RC4("Wiki"  ).gen( 6) == "6044db6d41b7"
assert RC4("Secret").gen( 8) == "04d46b053ca87b59"

from idea import *
K = [1, 2, 3, 4, 5, 6, 7, 8]
M = [0, 1, 2, 3]
C = [4603, 60715, 408, 28133]
assert IDEA(K).block(M, False) == C
assert IDEA(K).block(C, True)  == M

from rc5 import *
K = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
M = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
C = [0x21, 0xa5, 0xdb, 0xee, 0x15, 0x4b, 0x8f, 0x6d]
assert RC5(K).block(M, False) == C
assert RC5(K).block(C, True)  == M

K = [0x91, 0x5f, 0x46, 0x19, 0xbe, 0x41, 0xb2, 0x51, 0x63, 0x55, 0xa5, 0x01, 0x10, 0xa9, 0xce, 0x91]
M = [0x21, 0xa5, 0xdb, 0xee, 0x15, 0x4b, 0x8f, 0x6d]
C = [0xf7, 0xc0, 0x13, 0xac, 0x5b, 0x2b, 0x89, 0x52]
assert RC5(K).block(M, False) == C
assert RC5(K).block(C, True)  == M

K = [0x78, 0x33, 0x48, 0xe7, 0x5a, 0xeb, 0x0f, 0x2f, 0xd7, 0xb1, 0x69, 0xbb, 0x8d, 0xc1, 0x67, 0x87]
M = [0xf7, 0xc0, 0x13, 0xac, 0x5b, 0x2b, 0x89, 0x52]
C = [0x2f, 0x42, 0xb3, 0xb7, 0x03, 0x69, 0xfc, 0x92]
assert RC5(K).block(M, False) == C
assert RC5(K).block(C, True)  == M

K = [0xdc, 0x49, 0xdb, 0x13, 0x75, 0xa5, 0x58, 0x4f, 0x64, 0x85, 0xb4, 0x13, 0xb5, 0xf1, 0x2b, 0xaf]
M = [0x2f, 0x42, 0xb3, 0xb7, 0x03, 0x69, 0xfc, 0x92]
C = [0x65, 0xC1, 0x78, 0xB2, 0x84, 0xD1, 0x97, 0xCC]
assert RC5(K).block(M, False) == C
assert RC5(K).block(C, True)  == M

K = [0x52, 0x69, 0xf1, 0x49, 0xd4, 0x1b, 0xa0, 0x15, 0x24, 0x97, 0x57, 0x4d, 0x7f, 0x15, 0x31, 0x25]
M = [0x65, 0xC1, 0x78, 0xB2, 0x84, 0xD1, 0x97, 0xCC]
C = [0xEB, 0x44, 0xE4, 0x15, 0xDA, 0x31, 0x98, 0x24]
assert RC5(K).block(M, False) == C
assert RC5(K).block(C, True)  == M


from rijndael import *
block = [0x11*i for i in range(16)]

# AES-128
out = [0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30, 0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a]
assert Rijndael(list(range(16)), 4, 4).block(block, False) == out
assert Rijndael(list(range(16)), 4, 4).block(out,   True ) == block

# AES-224
out = [0xdd, 0xa9, 0x7c, 0xa4, 0x86, 0x4c, 0xdf, 0xe0, 0x6e, 0xaf, 0x70, 0xa0, 0xec, 0x0d, 0x71, 0x91]
assert Rijndael(list(range(24)), 6, 4).block(block, False) == out
assert Rijndael(list(range(24)), 6, 4).block(out  , True)  == block

# AES-256
out = [0x8e, 0xa2, 0xb7, 0xca, 0x51, 0x67, 0x45, 0xbf, 0xea, 0xfc, 0x49, 0x90, 0x4b, 0x49, 0x60, 0x89]
assert Rijndael(list(range(32)), 8, 4).block(block, False) == out
assert Rijndael(list(range(32)), 8, 4).block(out,   True)  == block
