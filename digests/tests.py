# crpyt: toy cryptographic python library
# Copyright (C) 2014 Quentin SANTOS
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# END LICENCE

values = [
	"",
	"a",
	"abc",
	"message digest",
	"abcdefghijklmnopqrstuvwxyz",
	"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
	"12345678901234567890123456789012345678901234567890123456789012345678901234567890",
	# SHA1+
	"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
	"0123456701234567012345670123456701234567012345670123456701234567",
]
def test_digest(digest, hashes):
	for v, h in zip(values, hashes):
		assert digest().hash(v) == h, 'digest("%s") != "%s"' % (v,h)

from md2 import *
test_digest(MD2, [
	"8350e5a3e24c153df2275c9f80692773",
	"32ec01ec4a6dac72c0ab96fb34c0b5d1",
	"da853b0d3f88d99b30283a69e6ded6bb",
	"ab4f496bfb2a530b219ff33031fe06b0",
	"4e8ddff3650292ab5a4108c3aa47940b",
	"da33def2a42df13975352846c30338cd",
	"d5976f79d83d3a0dc9806c3c66f3efd8",
])

from md4 import *
test_digest(MD4, [
	"31d6cfe0d16ae931b73c59d7e0c089c0",
	"bde52cb31de33e46245e05fbdbd6fb24",
	"a448017aaf21d8525fc10ae87aa6729d",
	"d9130a8164549fe818874806e1c7014b",
	"d79e1c308aa5bbcdeea8ed63df412da9",
	"043f8582f241db351ce627e153e7f0e4",
	"e33b4ddc9c38f2199c3e7b164fcc0536",
])

from md5 import *
test_digest(MD5, [
	"d41d8cd98f00b204e9800998ecf8427e",
	"0cc175b9c0f1b6a831c399e269772661",
	"900150983cd24fb0d6963f7d28e17f72",
	"f96b697d7cb7938d525a2f31aaf161d0",
	"c3fcd3d76192e4007dfb496cca67e13b",
	"d174ab98d277d9f5a5611c2c9f419d9f",
	"57edf4a22be3c955ac49da2e2107b67a",
])

from sha1 import *
test_digest(SHA1, [
	"da39a3ee5e6b4b0d3255bfef95601890afd80709",
	"86f7e437faa5a7fce15d1ddcb9eaeaea377667b8",
	"a9993e364706816aba3e25717850c26c9cd0d89d",
	"c12252ceda8be8994d5fa0290a47231c1d16aae3",
	"32d10c7b8cf96570ca04ce37f2a19d84240d3a89",
	"761c457bf73b14d27e9e9265c46f4b4dda11f940",
	"50abf5706a150990a08b2c5ea40fa0e585554732",
	"84983e441c3bd26ebaae4aa1f95129e5e54670f1",
	"e0c094e867ef46c350ef54a7f59dd60bed92ae83",
])

from sha256 import *
test_digest(SHA256, [
	"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
	"ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb",
	"ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad",
	"f7846f55cf23e14eebeab5b4e1550cad5b509e3348fbc4efa3a1413d393cb650",
	"71c480df93d6ae2f1efad1447c66c9525e316218cf51fc8d9ed832f2daf18b73",
	"db4bfcbd4da0cd85a60c3c37d3fbd8805c77f15fc6b1fdfe614ee0a7c8fdb4c0",
	"f371bc4a311f2b009eef952dd83ca80e2b60026c8e935592d0f9c308453c813e",
	"248d6a61d20638b8e5c026930c3e6039a33ce45964ff2167f6ecedd419db06c1",
	"8182cadb21af0e37c06414ece08e19c65bdb22c396d48ba7341012eea9ffdfdd",
])
test_digest(SHA224, [
	"d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f",
	"abd37534c7d9a2efb9465de931cd7055ffdb8879563ae98078d6d6d5",
	"23097d223405d8228642a477bda255b32aadbce4bda0b3f7e36c9da7",
	"2cb21c83ae2f004de7e81c3c7019cbcb65b71ab656b22d6d0c39b8eb",
	"45a5f72c39c5cff2522eb3429799e49e5f44b356ef926bcf390dccc2",
	"bff72b4fcb7d75e5632900ac5f90d219e05e97a7bde72e740db393d9",
	"b50aecbe4e9bb0b57bc5f3ae760a8e01db24f203fb3cdcd13148046e",
])

from sha512 import *
test_digest(SHA512, [
	"cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce"
	"47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e"
	,
	"1f40fc92da241694750979ee6cf582f2d5d7d28e18335de05abc54d0560e0f53"
	"02860c652bf08d560252aa5e74210546f369fbbbce8c12cfc7957b2652fe9a75"
	,
	"ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a"
	"2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f"
	,
	"107dbf389d9e9f71a3a95f6c055b9251bc5268c2be16d6c13492ea45b0199f33"
	"09e16455ab1e96118e8a905d5597b72038ddb372a89826046de66687bb420e7c"
	,
	"4dbff86cc2ca1bae1e16468a05cb9881c97f1753bce3619034898faa1aabe429"
	"955a1bf8ec483d7421fe3c1646613a59ed5441fb0f321389f77f48a879c7b1f1"
	,
	"1e07be23c26a86ea37ea810c8ec7809352515a970e9253c26f536cfc7a9996c4"
	"5c8370583e0a78fa4a90041d71a4ceab7423f19c71b9d5a3e01249f0bebd5894"
	,
	"72ec1ef1124a45b047e8b7c75a932195135bb61de24ec0d1914042246e0aec3a"
	"2354e093d76f3048b456764346900cb130d2a4fd5dd16abb5e30bcb850dee843"
	,
	"204a8fc6dda82f0a0ced7beb8e08a41657c16ef468b228a8279be331a703c335"
	"96fd15c13b1b07f9aa1d3bea57789ca031ad85c7a71dd70354ec631238ca3445"
	,
	"846e0ef73436438a4acb0ba7078cfe381f10a0f5edebcb985b3790086ef5e7ac"
	"5992ac9c23c77761c764bb3b1c25702d06b99955eb197d45b82fb3d124699d78"
])
test_digest(SHA384, [
	"38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b",
	"54a59b9f22b0b80880d8427e548b7c23abd873486e1f035dce9cd697e85175033caa88e6d57bc35efae0b5afd3145f31",
	"cb00753f45a35e8bb5a03d699ac65007272c32ab0eded1631a8b605a43ff5bed8086072ba1e7cc2358baeca134c825a7",
	"473ed35167ec1f5d8e550368a3db39be54639f828868e9454c239fc8b52e3c61dbd0d8b4de1390c256dcbb5d5fd99cd5",
	"feb67349df3db6f5924815d6c3dc133f091809213731fe5c7b5f4999e463479ff2877f5f2936fa63bb43784b12f3ebb4",
	"1761336e3f7cbfe51deb137f026f89e01a448e3b1fafa64039c1464ee8732f11a5341a6f41e0c202294736ed64db1a84",
	"b12932b0627d1c060942f5447764155655bd4da0c9afa6dd9b9ef53129af1b8fb0195996d2de9ca0df9d821ffee67026",
])

from keccak import *
state = Keccak()
state.block()
assert state.A == [
	[0xf1258f7940e1dde7, 0xff97a42d7f8e6fd4, 0xeb5aa93f2317d635, 0x05e5635a21d9ae61, 0x940c7922ae3a2614],
	[0x84d5ccf933c0478a, 0x90fee5a0a44647c4, 0xa9a6e6260d712103, 0x64befef28cc970f2, 0x1841f924a2c509e4],
	[0xd598261ea65aa9ee, 0x8c5bda0cd6192e76, 0x81a57c16dbcf555f, 0x613670957bc46611, 0x16f53526e70465c2],
	[0xbd1547306f80494d, 0xad30a6f71b19059c, 0x43b831cd0347c826, 0xb87c5a554fd00ecb, 0x75f644e97f30a13b],
	[0x8b284e056253d057, 0x30935ab7d08ffc64, 0x01f22f1a11a5569f, 0x8c3ee88a1ccf32c8, 0xeaf1ff7b5ceca249],
]

s = "\x00\x11\x22\x33\x44\x55\x66\x77\x88\x99\xaa\xbb\xcc\xdd\xee\xff"
h = "038907e89c919cd8f90a7fbc5a88ff9278108daef3ebcda0ceb383e1"
assert Keccak(1152, 448, 224).hash(s) == h

assert Keccak224().hash("") == "f71837502ba8e10837bdd8d365adb85591895602fc552b48b7390abd"
assert Keccak256().hash("") == "c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470"
assert Keccak384().hash("") == \
	"2c23146a63a29acf99e73b88f8c24eaa7dc60aa771780ccc006afbfa8fe2479b2dd2b21362337441ac12b515911957ff"
assert Keccak512().hash("") == \
	"0eab42de4c3ceb9235fc91acffe746b29c29a8c366b7c60e4e67c466f36a4304" \
	"c00fa9caf9d87976ba469bcbe06713b435f091ef2769fb160cdab33d3670680e"

assert SHA3_224().hash("") == "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7"
assert SHA3_256().hash("") == "a7ffc6f8bf1ed76651c14756a061d662f580ff4de43b49fa82d80a4b80f8434a"
assert SHA3_384().hash("") == \
	"0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004"
assert SHA3_512().hash("") == \
	"a69f73cca23a9ac5c8b567dc185a756e97c982164fe25859e0d1dcc1475c80a6" \
	"15b2123af1f5f94c11e3e9402c3ac558f500199d95b6d3e301758586281dcd26"

assert SHAKE128(4096).hash("") == \
	"7f9c2ba4e88f827d616045507605853ed73b8093f6efbc88eb1a6eacfa66ef26" \
	"3cb1eea988004b93103cfb0aeefd2a686e01fa4a58e8a3639ca8a1e3f9ae57e2" \
	"35b8cc873c23dc62b8d260169afa2f75ab916a58d974918835d25e6a435085b2" \
	"badfd6dfaac359a5efbb7bcc4b59d538df9a04302e10c8bc1cbf1a0b3a5120ea" \
	"17cda7cfad765f5623474d368ccca8af0007cd9f5e4c849f167a580b14aabdef" \
	"aee7eef47cb0fca9767be1fda69419dfb927e9df07348b196691abaeb580b32d" \
	"ef58538b8d23f87732ea63b02b4fa0f4873360e2841928cd60dd4cee8cc0d4c9" \
	"22a96188d032675c8ac850933c7aff1533b94c834adbb69c6115bad4692d8619" \
	"f90b0cdf8a7b9c264029ac185b70b83f2801f2f4b3f70c593ea3aeeb613a7f1b" \
	"1de33fd75081f592305f2e4526edc09631b10958f464d889f31ba010250fda7f" \
	"1368ec2967fc84ef2ae9aff268e0b1700affc6820b523a3d917135f2dff2ee06" \
	"bfe72b3124721d4a26c04e53a75e30e73a7a9c4a95d91c55d495e9f51dd0b5e9" \
	"d83c6d5e8ce803aa62b8d654db53d09b8dcff273cdfeb573fad8bcd45578bec2" \
	"e770d01efde86e721a3f7c6cce275dabe6e2143f1af18da7efddc4c7b70b5e34" \
	"5db93cc936bea323491ccb38a388f546a9ff00dd4e1300b9b2153d2041d205b4" \
	"43e41b45a653f2a5c4492c1add544512dda2529833462b71a41a45be97290b6f" \

assert SHAKE256(4096).hash("") == \
	"46b9dd2b0ba88d13233b3feb743eeb243fcd52ea62b81b82b50c27646ed5762f" \
	"d75dc4ddd8c0f200cb05019d67b592f6fc821c49479ab48640292eacb3b7c4be" \
	"141e96616fb13957692cc7edd0b45ae3dc07223c8e92937bef84bc0eab862853" \
	"349ec75546f58fb7c2775c38462c5010d846c185c15111e595522a6bcd16cf86" \
	"f3d122109e3b1fdd943b6aec468a2d621a7c06c6a957c62b54dafc3be87567d6" \
	"77231395f6147293b68ceab7a9e0c58d864e8efde4e1b9a46cbe854713672f5c" \
	"aaae314ed9083dab4b099f8e300f01b8650f1f4b1d8fcf3f3cb53fb8e9eb2ea2" \
	"03bdc970f50ae55428a91f7f53ac266b28419c3778a15fd248d339ede785fb7f" \
	"5a1aaa96d313eacc890936c173cdcd0fab882c45755feb3aed96d477ff96390b" \
	"f9a66d1368b208e21f7c10d04a3dbd4e360633e5db4b602601c14cea737db3dc" \
	"f722632cc77851cbdde2aaf0a33a07b373445df490cc8fc1e4160ff118378f11" \
	"f0477de055a81a9eda57a4a2cfb0c83929d310912f729ec6cfa36c6ac6a75837" \
	"143045d791cc85eff5b21932f23861bcf23a52b5da67eaf7baae0f5fb1369db7" \
	"8f3ac45f8c4ac5671d85735cdddb09d2b1e34a1fc066ff4a162cb263d6541274" \
	"ae2fcc865f618abe27c124cd8b074ccd516301b91875824d09958f341ef274bd" \
	"ab0bae316339894304e35877b0c28a9b1fd166c796b9cc258a064a8f57e27f2a" \
